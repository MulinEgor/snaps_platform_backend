datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider  = "prisma-client-py"
  interface = "asyncio"
}

model Role {
  uuid  String @id @default(uuid())
  name  String
  users User[]

  @@map("roles")
}

model User {
  uuid            String   @id @default(uuid())
  email           String   @unique
  hashed_password String
  role_uuid       String
  role            Role     @relation(fields: [role_uuid], references: [uuid])
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("users")
}

enum ApplicationType {
  MOBILE
  WEB
}

model Favor {
  uuid             String          @id @default(uuid())
  name             String
  includes         String[]
  duration_weeks   Float
  price            Float
  application_type ApplicationType
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt

  @@map("favors")
}

model Guarantee {
  uuid       String   @id @default(uuid())
  name       String
  image_url  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("guarantees")
}

model Project {
  uuid             String          @id @default(uuid())
  name             String
  description      String
  application_type ApplicationType
  duration_weeks   Float
  image_urls       String[]
  review_uuid      String?         @unique
  review           Review?         @relation(fields: [review_uuid], references: [uuid], onDelete: Cascade)
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt

  @@map("projects")
}

model Stage {
  uuid        String   @id @default(uuid())
  place       Int
  name        String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("stages")
}

model Question {
  uuid       String   @id @default(uuid())
  question   String
  answer     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("questions")
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

model Request {
  uuid             String          @id @default(uuid())
  name             String
  email            String
  phone            String
  application_type ApplicationType
  description      String
  price            Float
  status           Status          @default(PENDING)
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt

  @@map("requests")
}

model Review {
  uuid          String    @id @default(uuid())
  name          String
  description   String
  reviewer_name String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  projects      Project[]

  @@map("reviews")
}
